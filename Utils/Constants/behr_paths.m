classdef behr_paths
    % behr_paths: paths used in the BEHR algorithm.
    %	Automatically generated by BEHR_initial_setup on 2017-08-07
    %
    %	A number of paths are stored in this class as constant properties
    %	that can be accessed directly from the class without an instance. A
    %	list of the paths can be printed by calling
    %	behr_paths.ListAvailablePaths().
    %
    %   This can also assist in setting up your Matlab search path to find
    %   all the BEHR code. See the behr_paths.AddCodePaths() method.
    %
    %	Note that this function should not be added to the BEHR git repo,
    %	as it must be specific to each person's computer. The first time
    %	this is created, you should check that all the paths are correct.
    %	You can verify they exists by calling the
    %	behr_paths.ValidatePaths() method.
    %
    %   Also note that this class should only rely on built-in Matlab
    %   function and not any code that comes with the BEHR or related
    %   repositories, since it needs to be callable before those functions
    %   are on the Matlab search path to help users set up the search path.
    
    % Each of the following paths needs to be a local path on your
    % computer. For the code repositories, you will want to clone those
    % from the file server onto your computer and point the path to that
    % cloned repository. For the data directories that are on the file
    % server, you will need to mount the file server as a network drive on
    % your computer and point the paths below to that mounted path. Network
    % drives mapped on windows have the drive letter you assign when you
    % map it; on Macs, they are usually found under the /Volumes path. If
    % you are working on a Linux computer you'll usually create mount
    % points under /mnt or similar - that is how the satellite download
    % computer is set up.
    %
    % If you're working with BEHR on a cluster, you likely won't need to
    % deal with networked drives, and everything will have a
    % straightforward path.
    
    properties(Constant=true)
		% Export BEHR in your environment
		% The directory of the BEHR-core repository. May be cloned from
		% https://github.com/CohenBerkeleyLab/BEHR-core
		behr_core = strcat(getenv('BEHR'),'BEHR-core');

		% The directory of the BEHR-core-utils repository. May be cloned
		% from https://github.com/CohenBerkeleyLab/BEHR-core-utils
		behr_utils = strcat(getenv('BEHR'),'BEHR-core-utils');

		% The directory of the general Matlab-Gen-Utils repository (not the
		% BEHR-core-utils repo). May be cloned from
		% https://github.com/CohenBerkeleyLab/Matlab-Gen-Utils
		utils = strcat(getenv('BEHR'),'Matlab-Gen-Utils');

		% The AMF_tools directory in the BEHR-core-utils repository on your
		% computer. It should contain the files damf.txt and nmcTmpYr.txt
		amf_tools_dir = strcat(getenv('BEHR'),'BEHR-core-utils/AMF_tools');

		% The PSM Gridding repository. It should contain the files
		% PSM_Main.py and psm_wrapper.m. May be cloned from
		% https://github.com/CohenBerkeleyLab/BEHR-PSM-Gridding
		psm_dir = strcat(getenv('BEHR'),'BEHR-PSM-Gridding');

		% The MatlabPythonInterface repository. May be cloned from
		% https://github.com/CohenBerkeleyLab/MatlabPythonInterface
		python_interface = strcat(getenv('BEHR'),'MatlabPythonInterface');

		% The WRF_Utils repository which should contain the function
		% convert_wrf_temperature.m May be cloned from
		% https://github.com/CohenBerkeleyLab/WRF_Utils
		wrf_utils = strcat(getenv('BEHR'),'WRF_Utils');

		% The default path where OMI_SP_*_yyyymmdd.mat files will be saved
		% and read from. It should have subdirectories for each region to be
		% produced (e.g. "us" - must be lower case). For UC Berkeley users,
		% is it on the file server at 128.32.208.13 which should be mounted
		% on your computer.
		sp_mat_dir = strcat(getenv('BEHR'),'data/SP_Files');

		% The default root path where OMI_BEHR_*_yyyymmdd.mat files will be
		% saved and read from. It should have subdirectories for each region
		% to be produced and within each region directories "daily" and
		% "monthly". For UC Berkeley users, is it on the file server at
		% 128.32.208.13 which should be mounted on your computer.
		behr_mat_dir = strcat(getenv('BEHR'),'data/BEHR_Files');

		% This should contain folders organized by year and month with
		% OMI-Aura_L2-OMNO2 files in them. For UC Berkeley users, is it on
		% the file server at 128.32.208.13 which should be mounted on your
		% computer.
		omno2_dir = strcat(getenv('BEHR'),'data/OMI/OMNO2/version_3_3_0');

		% This should contain folders organized by year and month with
		% OMI-Aura_L2-OMNPIXCOR files in them. For UC Berkeley users, is it
		% on the file server at 128.32.208.13 which should be mounted on
		% your computer.
		ompixcor_dir = strcat(getenv('BEHR'),'data/OMI/OMPIXCOR/version_003');

		% This should contain folders for each year with MYD06_L2 files in
		% them. For UC Berkeley users, is it on the file server at
		% 128.32.208.13 which should be mounted on your computer.
		myd06_dir = strcat(getenv('BEHR'),'data/MODIS/MYD06_L2');

		% This should contain folders for each year with MCD43D* files in
		% them. For UC Berkeley users, is it on the file server at
		% 128.32.208.13 which should be mounted on your computer.
		mcd43d_dir = strcat(getenv('BEHR'),'data/MODIS/MCD43D');

		% This is the "Land_Water_Mask_7Classes_UMD file, available from
		% ftp://rsftp.eeos.umb.edu/data02/Gapfilled/ (as of 21 Sept 2017).
		% For UC Berkeley users, is it on the file server at 128.32.208.13
		% which should be mounted on your computer.
		modis_land_mask = strcat(getenv('BEHR'),'data/MODIS/Land_Water_Mask_7Classes_UMD.hdf');

		% This is the folder with the GLOBE database, available from
		% https://www.ngdc.noaa.gov/mgg/topo/gltiles.html (as of 21 Sept
		% 2017). It should contain files a10g through p10g and their .hdr
		% files. For UC Berkeley users, is it on the file server at
		% 128.32.208.13 which should be mounted on your computer.
		globe_dir = strcat(getenv('BEHR'),'data/GLOBE_Database');

		% The directory where data should be staged before being put on the
		% folders visible to the website. Also on the file server at
		% 128.32.208.13 which should be mounted on your computer.
		website_staging_dir = strcat(getenv('BEHR'),'data/WEBSITE/staging');

		% The path that contains the WRF_BEHR*.nc monthly profile files.
		% This should be on the file server at cohenwrfnas.dyn.berkeley.edu.
		% wrf_monthly_profiles = '/mnt/share-wrf1/BEHR-WRF/MonthlyProfiles';

		% Add all paths that contain WRF profiles. These should be folders
		% that are organized by year and month, with wrfout_d01 files in
		% them. These will be found on the file server at
		% cohenwrfnas.dyn.berkeley.edu, all volumes must be mounted on your
		% computer.
		wrf_profiles = {strcat(getenv('BEHR'),'data/wrf_profiles')};

    end
    
    properties(Constant=true, Access=private)
		is_field_file = struct('behr_core', false,...
			'behr_utils', false,...
			'utils', false,...
			'amf_tools_dir', false,...
			'psm_dir', false,...
			'python_interface', false,...
			'wrf_utils', false,...
			'sp_mat_dir', false,...
			'behr_mat_dir', false,...
			'omno2_dir', false,...
			'ompixcor_dir', false,...
			'myd06_dir', false,...
			'mcd43d_dir', false,...
			'modis_land_mask', true,...
			'globe_dir', false,...
			'website_staging_dir', false,...
			'wrf_monthly_profiles', false,...
			'wrf_profiles', false);
        
		is_code_dir = struct('behr_core', true,...
			'behr_utils', true,...
			'utils', true,...
			'amf_tools_dir', false,...
			'psm_dir', true,...
			'python_interface', true,...
			'wrf_utils', true,...
			'sp_mat_dir', false,...
			'behr_mat_dir', false,...
			'omno2_dir', false,...
			'ompixcor_dir', false,...
			'myd06_dir', false,...
			'mcd43d_dir', false,...
			'modis_land_mask', false,...
			'globe_dir', false,...
			'website_staging_dir', false,...
			'wrf_monthly_profiles', false,...
			'wrf_profiles', false);

		do_genpath = struct('behr_core', true,...
			'behr_utils', true,...
			'utils', true,...
			'amf_tools_dir', false,...
			'psm_dir', false,...
			'python_interface', true,...
			'wrf_utils', true,...
			'sp_mat_dir', false,...
			'behr_mat_dir', false,...
			'omno2_dir', false,...
			'ompixcor_dir', false,...
			'myd06_dir', false,...
			'mcd43d_dir', false,...
			'modis_land_mask', false,...
			'globe_dir', false,...
			'website_staging_dir', false,...
			'wrf_monthly_profiles', false,...
			'wrf_profiles', false);

		is_pypath = struct('behr_core', false,...
			'behr_utils', false,...
			'utils', false,...
			'amf_tools_dir', false,...
			'psm_dir', true,...
			'python_interface', false,...
			'wrf_utils', false,...
			'sp_mat_dir', false,...
			'behr_mat_dir', false,...
			'omno2_dir', false,...
			'ompixcor_dir', false,...
			'myd06_dir', false,...
			'mcd43d_dir', false,...
			'modis_land_mask', false,...
			'globe_dir', false,...
			'website_staging_dir', false,...
			'wrf_monthly_profiles', false,...
			'wrf_profiles', false);
    end
    
    methods(Static=true)
        function success = ValidatePaths(varargin)
            % BEHR_PATHS.ValidatePaths() checks that all the paths
            % specified as static properties of this class. Any paths that
            % are not directories (or files, if the private property
            % is_field_file is true for that path) are printed. This
            % function returns true if all paths a valid, false otherwise.
            %
            % BEHR_PATHS.ValidatePaths('codeonly') only verifies paths
            % marked internally a code directories that would be added to
            % the Matlab path by behr_paths.AddCodePaths().
            code_only = ismember('codeonly', varargin);
            
            fns = fieldnames(behr_paths);
            success = true;
            for a=1:numel(fns)
                if code_only && ~behr_paths.is_code_dir.(fns{a})
                    continue
                end
                
                if behr_paths.is_field_file.(fns{a})
                    test_type = 'file';
                else
                    test_type = 'dir';
                end
                if ~iscell(behr_paths.(fns{a}))
                    if ~exist(behr_paths.(fns{a}), test_type)
                        fprintf('%s is not a valid path\n', fns{a});
                        success = false;
                    end
                else
                    for b=1:numel(behr_paths.(fns{a}))
                        if ~exist(behr_paths.(fns{a}){b}, test_type)
                            fprintf('%s{%d} is not a valid path\n', fns{a}, b);
                            success = false;
                        end
                    end
                end
            end
        end
        
        function AddCodePaths(varargin)
            % BEHR_PATHS.AddCodePaths() will add all directories listed
            % internally as containing code to the Matlab search path. It
            % will ask interactively if you want to add the directories to
            % your Matlab path permanently.
            %
            % BEHR_PATHS.AddCodePaths('nosave')
            % BEHR_PATHS.AddCodePaths('save') both of these syntaxes
            % preempt the interactive question. 'nosave' indicates not to
            % save the new Matlab search path, 'save' indicates to save the
            % new Matlab search path.
            %
            % BEHR_PATHS.AddCodePaths( ___, 'quiet' ) suppresses printing
            % each path added. This can be used with any of the previous
            % syntaxes.
            be_quiet = ismember('quiet', varargin);
            ask_to_save = true;
            if ismember('nosave', varargin)
                ask_to_save = false;
                save_paths = false;
            elseif ismember('save', varargin)
                ask_to_save = false;
                save_paths = true;
            end
            
            if ~behr_paths.ValidatePaths('codeonly')
                error('path_setup:bad_paths', 'One or more directories specified as code paths are invalid')
            end
            
            if ask_to_save
                save_paths = strcmpi(input('Permanently add the BEHR code directories to your Matlab path (y to do so, any other answer will not)? ', 's'), 'y');
            end
            
            fns = fieldnames(behr_paths);
            for a=1:numel(fns)
                if behr_paths.is_code_dir.(fns{a})
                    if behr_paths.do_genpath.(fns{a})
                        paths_to_add = behr_paths.no_git(genpath(behr_paths.(fns{a})));
                        
                        print_paths = strsplit(paths_to_add,':');
                        if ~be_quiet
                            for b=1:numel(print_paths)
                                fprintf('Adding %s\n', print_paths{b});
                            end
                        end
                    else
                        paths_to_add = behr_paths.(fns{a});
                        if ~be_quiet
                            fprintf('Adding %s\n', paths_to_add);
                        end
                    end
                    addpath(paths_to_add);
                end
            end
            
            if save_paths
                savepath();
            elseif ~be_quiet
                fprintf('BEHR paths added to Matlab search path for this session only. To make the change permanent, use "savepath()"\n');
            end
        end
        
        function SetPythonPath(varargin)
            % BEHR_PATHS.SetPythonPath() modifies the Python search path
            % used by Matlab to include all paths marked as including
            % Python files.
            be_quiet = ismember('quiet', varargin);
            
            fns = fieldnames(behr_paths);
            for a=1:numel(fns)
                if behr_paths.is_pypath.(fns{a})
                    new_path = behr_paths.(fns{a});
                    if count(py.sys.path, new_path) == 0
                        if ~be_quiet
                            fprintf('Adding %s\n', new_path);
                        end
                        insert(py.sys.path, int32(0), new_path);
                    end
                end
            end
        end
        
        function ListAvailablePaths()
            % BEHR_PATHS.ListAvailablePaths() prints each path's property
            % name followed by the path it refers to.
            fns = fieldnames(behr_paths);
            fprintf('Available paths:\n');
            for a=1:numel(fns)
                if ~iscell(behr_paths.(fns{a}))
                    fprintf('  %s = %s\n', fns{a}, behr_paths.(fns{a}));
                else
                    fprintf('  %s = {%s}\n', fns{a}, strjoin(behr_paths.(fns{a}), ', '));
                end
            end
        end
        
        function d = SPMatSubdir(region)
            % BEHR_PATHS.SPMatSubdir( REGION ) returns the proper default
            % path for OMI_SP files produced for the given REGION.
            d = fullfile(behr_paths.sp_mat_dir, lower(region));
        end
        
        function d = BEHRMatSubdir(region, prof_mode)
            % BEHR_PATHS.BEHRMatSubdir( REGION, PROF_MODE ) returns the
            % proper default path for OMI_BEHR files produced for the given
            % REGION and PROF_MODE (profile mode, usually 'daily' or
            % 'monthly'
            d = fullfile(behr_paths.behr_mat_dir, lower(region), lower(prof_mode));
        end
    end
    
    methods(Static = true, Access = private)
        function p = no_git(p)
            if ischar(p)
                p = strsplit(p,':');
            elseif ~iscellstr(p)
                return
            end
            
            % If p is a cell array with only one element, then the return
            % from strcmp is not a cell array
            gg = strfind(p, '/.git');
            if iscell(gg)
                gg = cellfun('isempty', gg);
            end
            xx = gg & ~cellfun('isempty', p);
            p = strjoin(p(xx),':');
        end
    end
end
